version: '3.4'
services:

  backend_app:
    build:
      context: backend_app
      dockerfile: Dockerfile
      target: base
    container_name: backend_app
    restart: unless-stopped
    tty: true
    user: "1000:1000"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    working_dir: /var/www/app
    volumes:
      - ./backend_app:/var/www/app:z
      - ./volumes/logs:/var/www/app/logs:z
    extra_hosts:
      - "host:host-gateway"
    links:
      - db
      - redis
    networks:
      - app-network

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    tty: true
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: [ 'redis-server', '--appendonly yes', '--requirepass $REDIS_PASSWORD' ]
    volumes:
      - redisdata:/data
    networks:
      - app-network

  frontend_app:
    build:
      context: frontend_app
      dockerfile: Dockerfile
    container_name: frontend_app
    restart: unless-stopped
    tty: true
    user: "1000:1000"
    working_dir: /var/www/app
    volumes:
      - ./frontend_app/:/var/www/app:z
    networks:
      - app-network

  webserver:
    image: nginx:latest
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
    volumes:
      - ./docker/prod/nginx/conf.d/:/etc/nginx/conf.d/:z
    links:
      - backend_app
      - frontend_app
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  blockchain_state:
    driver: local
  pgdata:
    driver: local
  redisdata:
    driver: local
